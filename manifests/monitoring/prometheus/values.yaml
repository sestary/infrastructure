---
alertmanager:
  defaultRules:
    create: true
    rules:
      etcd: false
      kubeControllerManager: false
      kubelet: false
      kubeProxy: false
      network: true

  ingress:
    enabled: true

    annotations:
      nginx.ingress.kubernetes.io/auth-url: |-
        http://ak-outpost-sestary-outpost.auth-authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
      nginx.ingress.kubernetes.io/auth-signin: |-
        https://prometheusalerts.sestary.eu/outpost.goauthentik.io/start?rd=$escaped_request_uri
      nginx.ingress.kubernetes.io/auth-response-headers: |-
        Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
      nginx.ingress.kubernetes.io/auth-snippet: |
        proxy_set_header X-Forwarded-Host $http_host;

    ingressClassName: nginx

    hosts:
      - prometheusalerts.sestary.eu
    paths:
      - /

    tls:
      - hosts:
          - prometheusalerts.sestary.eu

  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: truenas-iscsi-csi
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

prometheus:
  ingress:
    enabled: true

    annotations:
      nginx.ingress.kubernetes.io/auth-url: |-
        http://ak-outpost-sestary-outpost.auth-authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
      nginx.ingress.kubernetes.io/auth-signin: |-
        https://prometheus.sestary.eu/outpost.goauthentik.io/start?rd=$escaped_request_uri
      nginx.ingress.kubernetes.io/auth-response-headers: |-
        Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
      nginx.ingress.kubernetes.io/auth-snippet: |
        proxy_set_header X-Forwarded-Host $http_host;

    ingressClassName: nginx

    hosts:
      - prometheus.sestary.eu
    paths:
      - /

    tls:
      - hosts:
          - prometheus.sestary.eu

  prometheusSpec:
    # Find podMonitors, serviceMonitor, etc. in all namespaces
    serviceMonitorNamespaceSelector:
      matchLabels: {}
     # With this, we don't need the label "release: kube-prometheus-stack" on the service monitor
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorNamespaceSelector:
      matchLabels: {}
    podMonitorSelectorNilUsesHelmValues: false
    ruleNamespaceSelector:
      matchLabels: {}
    ruleSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    probeNamespaceSelector:
      matchLabels: {}
    probeSelectorNilUsesHelmValues: false

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: truenas-iscsi-csi
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi

# Using Grafana Cloud
grafana:
  enabled: false

# MicroK8s doesn't use anye of these
coreDns:
  enabled: false
kubeEtcd:
  enabled: false
kubeControllerManager:
  enabled: false
kubelet:
  enabled: false
kubeProxy:
  enabled: false
kubeScheduler:
  enabled: false
